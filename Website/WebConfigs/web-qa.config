<?xml version="1.0" encoding="UTF-8"?>
<configuration>

  <!-- !!! AWS (QA) Configuration !!! -->

  <system.web>

    <!-- Set httpOnlyCookies = true. This reduces session hi-jacking -->
    <httpCookies httpOnlyCookies="true" requireSSL="false" domain="qa.mobileauthcorp.net" />

    <webServices>
      <protocols>
        <add name="HttpGet" />
        <add name="HttpPost" />
      </protocols>
    </webServices>

    <customErrors mode="RemoteOnly" defaultRedirect="~/404.aspx">
      <error statusCode="404" redirect="~/404.aspx" />
    </customErrors>

    <!-- Debug will be turned off when app initializes -->
    <compilation debug="true" targetFramework="4.5.1">
      <assemblies>
        <add assembly="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Data.Services.Client, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
      </assemblies>
    </compilation>

    <!-- Set enableVersionHeader = false. This hides the framework version info in the response header -->
    <httpRuntime enableVersionHeader="false" targetFramework="4.5.1" requestValidationMode="2.0" />

    <authentication mode="Forms">
      <forms loginUrl="~/Admin/Security/Default.aspx" protection="All" timeout="15" name="MAC_R1" requireSSL="false" slidingExpiration="true" defaultUrl="~/Admin/Users/MyAccount/Default.aspx" cookieless="UseCookies" enableCrossAppRedirects="false" />
    </authentication>

    <membership defaultProvider="MACOTPSystem" userIsOnlineTimeWindow="15">
      <providers>
        <add name="MACOTPSystem" type="MongoDB.Web.Providers.MongoDbMembershipProvider, MongoDB.Web, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null" applicationName="MACOTPSystem" connectionStringName="MongoServer" enablePasswordReset="true" enablePasswordRetrieval="true" passwordFormat="Encrypted" requiresQuestionAndAnswer="false" requiresUniqueEmail="true" maxInvalidPasswordAttempts="3" minRequiredPasswordLength="3" minRequiredNonalphanumericCharacters="0" passwordAttemptWindow="10" />
      </providers>
    </membership>

    <machineKey decryptionKey="2EA707D64DB6EF944BEE4E7B68644CA558775EF7CB9C4146" validationKey="0B20A5D95CABC3FB56C40A694E9C94992C8970A9B300D050DC9EF62465AEB6A5A727E4491AB6E9632A94CF8E0AF4B83E75C9BBF8B314B2507ECD767AC25BAFF1" />
    <pages validateRequest="false" clientIDMode="Static" buffer="true" enableViewStateMac="true" viewStateEncryptionMode="Always" enableEventValidation="false" controlRenderingCompatibilityVersion="4.0" />
    <sessionState timeout="15" mode="InProc" cookieless="UseCookies" />

  </system.web>

  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="MongoDB.Driver" publicKeyToken="f686731cfb9cc103" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.8.3.9" newVersion="1.8.3.9" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="MongoDB.Bson" publicKeyToken="f686731cfb9cc103" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.8.3.9" newVersion="1.8.3.9" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>

  <connectionStrings>
    <add name="MongoServer" connectionString="mongodb://admin:admin@ds147069.mlab.com:47069" />
    <add name="DocumentationServer" connectionString="admin://macservices:admin@ds147069.mlab.com:47069" />
    <add name="OperationalTestServer" connectionString="admin://macservices:admin@ds147069.mlab.com:47069" />
  </connectionStrings>

  <appSettings>

    <!-- CurrentEnvironment -->
    <add key="CurrentEnvironment" value="qa.mobileauthcorp.net" />
    <add key="ConfigName" value="QA" />
    <!-- ============= Database  =============== -->

    <!-- Active System Database -->
    <add key="MongoDbName" value="mac_r1" />
    <!-- Documentation Database -->
    <add key="MongoDbDocumentDBName" value="mac_r1" />
    <!-- Operational Test Database -->
    <add key="MongoDbOperationalTestDBName" value="mac_r1" />

    <!-- Connection Pool Settings - Connections -->
    <add key="ConnectionTimeoutSeconds" value="2" />
    <add key="MinDBConnections" value="1000" />
    <add key="MaxDBConnections" value="20000" />

    <!-- Email Settings -->
    <add key="Port" value="25" />
    <add key="Host" value="services.mobileauthcorp.com" />
    <add key="EnableSsl" value="false" />
    <add key="UseDefaultCredentials" value="false" />
    <add key="LoginUserName" value="info@services.mobileauthcorp.com" />
    <add key="LoginPassword" value="jumP4000c" />

    <!-- 
      ConnectionMode Options: Automatic, Direct, ReplicaSet, ShardRouter
      ReadPreferenceMode Options: Nearest, Primary, PrimaryPreferred, Secondary, SecondaryPreferred 
      WriteConcern Options: Acknowledged, Unacknowledged
    -->
    <add key="ConnectionMode" value="Automatic" />
    <add key="ReadPreference" value="Nearest" />
    <add key="WriteConcern" value="Acknowledged" />
    <add key="ReplicaSetName" value="rs1" />
    <add key="BackgroundIndex" value="true" />
    <add key="SparseIndex" value="true" />
    <!-- AWS load testing options-->
    <add key="UseStaggeredRequestTimers" value="false" />
    <add key="AutoRetryCount" value="0" />
    <add key="MinWaitSecs" value="1" />
    <add key="MaxWaitSecs" value="1" />

    <!-- ============= Runtime Settings =============== -->
    <!-- These are the browser hooks for Visual Studio. It creates calls to localhost:53020/82420e2d3c7545f88f196f2069974532/arterySignalR/connect. Causing problems with JQuery and bogging down the application -->
    <add key="vs:EnableBrowserLink" value="false" />
    <!-- what is this for -->
    <add key="UseClientService" value="true" />
    <!-- Initialize user clientid list on application start -->
    <add key="InitUserClientIdList" value="true" />
    <!-- false=(normal)Call Ads server, true=(testing)Use the following Url-->
    <add key="MacTestAdServiceUrl" value="http://localhost" />
    <!--Base Url where MAC's Open Access Services are running -->
    <add key="MacOpenServicesUrl" value="http://localhost:8080/MACServices" />
    <!-- Base Url where MAC's OTP and Registration Services are running -->
    <add key="MacServicesUrl" value="http://localhost:8080/MACServices" />
    <!-- Registration Upload Folder, Note: must exists on Server where MAC's registration service is running -->
    <add key="RegistrationFileUploadSubFolder" value="\temp" />
    <!-- Message Providers - Note: must be full URL to service -->
    <add key="TwilioAPIService" value="http://localhost:8080/MACServices/Otp/TwilioAPIService.asmx/WsTwilioAPIService" />
    <add key="MessageBroadcastAPIService" value="http://localhost:8080/MACServices/Otp/MessageBroadcastAPIService.asmx/WsMessageBroadcastAPIService" />
    <add key="MessageBroadcastReplyDomain" value="http://qa.mobileauthcorp.net" />
    <!-- Post Verification Providers -->
    <add key="UserVerificationLexisNexisDebugOptions" value="LogRequestLogResponse" />
    <add key="UserVerificationLexisNexisLogToFile" value="c:\temp\" />

    <!-- ================== Debug Settings =============== -->
    <!-- Overall debug flag -->
    <add key="Debug" value="false" />
    <!-- message delivery loop back test settings -->
    <add key="LoopBackTest" value="Disabled" />
    <!-- Where:
      Disabled = Normal operation
      NoSend  = don't send to message delivery, just return successfully,
      StartThread = don't send to message delivery, Start thread to call ValicateOTP service
      LoopBackReplyAtAPI = (MessageBroadcast only) don't send to message delivery, Start thread to send reply to reply service
      LoopBackReplyAtGateway = (MessageBroadcast only) tells gateway not to send to carrier and loop back to reply service
      -->
    <!-- ========= How to process ad requests ================= -->
    <!-- SecureAds = Call Secure Ads Server -->
    <!--<add key="AdServerDomain" value="SecureAds"/>-->
    <add key="AdServerRequestType" value="http"/>
    <!-- use test ad service target ads in AWS domain -->
    <!--<add key="AdServerDomain" value="http://www.otp-ap.us"/>-->
    <!-- use test ad service target ads on MACâ€™s office server -->
    <!--<add key="AdServerDomain" value="http://www.otp-ap.com"/>-->
    <!-- Local testing use test ads in demos project -->
    <add key="AdServerDomain" value="http://qa.otp-ap.us/iis" />
    <!-- Do not send ads -->
    <!--<add key="AdServerDomain" value="NoAds"/>-->

    <!-- ======================================================= -->
    <!-- Event Log Service request data -->
    <!-- The following codes have to be in the value to turn on the logging for the service:
    Keys are DebugLogRequests and DebugLogResponses and EmailServiceLog
    example: <add key="DebugLogRequests" value="RO,RV"/> 
              Will log requests for both RequestOTP and VerifyOTP services
    Note: settings are case sensitive.
              
           
    RO = RequestOTP(OTP Services)
    VO = VerifyOTP=VO(OTP Services)
    MB = MessageBroadcastAPIService(OTP Services)
    MR = MessageBroadcastReplyService(OTP Services)
    TW = TwilioAPIService(OTP Services)

    WP = UserVerificationWhitePagesPro(User Services)
    LN = UserVerificationLexisNexis(User Services)
    UR = EndUserRegistration(User Services)
    CR = EndUserCompleteRegistration(User Services)
    FR = EndUserFileRegistration(User Services)
    UM = EndUserManagement(User Services)
    SR = StsEndUserRegistration(User Services)
    
    OU = OpenEndUserServices(OAS Services)
    OC = OpenClientServices(OAS Services)
    OT = OpsTestService(OAS Services)
    
    EH = EventHistory(Event Services)
    EH1 = EventHistory1(Event Services)
    ES = EventHistoryStats(Event Services)
    EL = EventLog(Event Services)
    
    SS = SystemStats(Admin Services)
    MT = ManageTypeDefsService(Admin Services)
    GI = GroupInfo(Admin Services)
    CS = ClientServices(Admin Services)

    EL = EmailServiceLog(Test Service)
    TA = TestAdService(Test Service)
    ET = EventLogTests(Test Service)
    GC = GetClients(Test Service)
    GR = GetReply(Test Service)
    LI = GetTestLoginInfo(Test Service)
    TB = MacTestBank(Test Service)
    RC = RegisterClients(Test Service)
    RP = RegisterProviders(Test Service)

    API = Log API Details Requests and Responses (Service & API example: MB,API)
    
    true = All enabled
    false = All disabled
    -->
    <add key="DebugLogRequests" value="RO,OE,TA,MB,API,TB" />
    <!-- Event Log Service responce data -->
    <add key="DebugLogResponses" value="RO,OE,TA,MB,API,TB" />
    <!-- For debugging: return service error details to caller false(normal)=return error number only-->
    <add key="ReturnErrorDetails" value="true" />

  </appSettings>

  <system.webServer>

    <httpProtocol>
      <customHeaders>
        <!-- Remove these elements from the response header. The less info for hackers, the better -->
        <remove name="Server" />
        <remove name="X-AspNet-Version" />
        <remove name="X-Powered-By" />
        <!-- This is an iFrame buster. Prevents "click-jacking". -->
        <add name="X-Frame-Options" value="SAMEORIGIN" />
      </customHeaders>
    </httpProtocol>

    <rewrite>

      <rules>

        <!-- SSL redirection behind ELB on AWS -->
        <!-- Commented out because this only applies to servers running on AWS -->
        <!--<rule name="HTTPS rewrite behind ELB rule" stopProcessing="true">
          <match url="^(.*)$" ignoreCase="false" />
          <conditions>
            <add input="{HTTP_X_FORWARDED_PROTO}" pattern="^http$" ignoreCase="false" />
          </conditions>
          <action type="Redirect" redirectType="Found" url="https://{SERVER_NAME}{URL}" />
        </rule>-->

        <!-- Force SSL redirection. Comment out for AWS servers! -->
        <!--<rule name="Force HTTPS" enabled="true">
          <match url="(.*)" ignoreCase="false" />
          <conditions>
            <add input="{HTTPS}" pattern="off" />
          </conditions>
          <action type="Redirect" url="https://{HTTP_HOST}{REQUEST_URI}" appendQueryString="true" redirectType="Permanent" />
        </rule>-->

        <!-- Remove document name -->
        <rule name="Remove Document Name" stopProcessing="true">
          <match url="(.*)/default$" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
          </conditions>
          <action type="Redirect" url="{R:1}" />
        </rule>

        <!-- Remove file extension -->
        <rule name="Remove File Extension" stopProcessing="true">
          <match url="(.*)\.aspx$" />
          <action type="Redirect" url="{R:1}" redirectType="Found" />
        </rule>

        <!-- Internally, restore the complete url with file extension for server-side processing -->
        <rule name="Add File Extension for Backend" enabled="true">
          <match url=".*" negate="false" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
            <add input="{URL}" pattern="(.*)\.(.*)" negate="true" />
          </conditions>
          <action type="Rewrite" url="{R:0}.aspx" />
        </rule>

      </rules>

      <outboundRules>
        <!-- This removes the server element from the response header. Don't let hackers know what type of web server we're running -->
        <rule name="Remove_Server_Header">
          <match serverVariable="RESPONSE_SERVER" pattern=".*" />
          <action type="Rewrite" />
        </rule>
      </outboundRules>

    </rewrite>

    <!-- Security rules engine. Need to write rules to eliminate XSS, replay and other attacks -->
    <ModSecurity enabled="true" configFile="C:\Program Files\ModSecurity IIS\modsecurity_iis.conf" />

    <!-- Never allow directory browsing. Reduce info provided to hackers -->
    <directoryBrowse enabled="false" showFlags="Date, Time, Size, Extension, LongDate" />

    <security>
      <authorization>
        <remove users="*" roles="" verbs="" />
        <add accessType="Allow" users="*" />
      </authorization>
      <requestFiltering allowDoubleEscaping="false" allowHighBitCharacters="false">

        <denyUrlSequences>
          <add sequence=".." />
          <add sequence=":" />
        </denyUrlSequences>

        <requestLimits maxUrl="3072" maxQueryString="2048" />

        <verbs allowUnlisted="true">
          <add verb="OPTIONS" allowed="false" />
          <add verb="FIND" allowed="false" />
          <add verb="TRACE" allowed="false" />
        </verbs>

        <filteringRules>
          <filteringRule name="SQL_Injection_Mitigation" scanUrl="true" scanQueryString="true">
            <appliesTo>
              <add fileExtension=".asp" />
              <add fileExtension=".aspx" />
            </appliesTo>
            <denyStrings>
              <!-- Make sure these keywords have a space afterwards. If not, any request with these keywords in the query string will be rejected by IIS request filtering and returns a 404.19 not found error -->
              <add string="select " />
              <add string="drop " />
              <add string="update " />
              <add string="convert " />
              <add string="--" />
              <add string=";" />
              <add string="/*" />
              <!-- <add string="@" /> -->
              <add string="char " />
              <add string="alter " />
              <add string="begin " />
              <add string="cast " />
              <add string="create " />
              <add string="cursor " />
              <add string="declare " />
              <add string="delete " />
              <add string="end " />
              <add string="exec " />
              <add string="fetch " />
              <add string="insert " />
              <add string="kill " />
              <add string="open " />
              <add string="sys " />
              <add string="table " />
            </denyStrings>
          </filteringRule>
          <filteringRule name="Embedded_Script" scanUrl="true" scanQueryString="true">
            <appliesTo>
              <add fileExtension=".asp" />
              <add fileExtension=".aspx" />
            </appliesTo>
            <denyStrings>
              <add string="&lt;script&gt;"/>
              <add string="&lt;/script&gt;"/>
            </denyStrings>
          </filteringRule>
        </filteringRules>

      </requestFiltering>
    </security>

    <validation validateIntegratedModeConfiguration="false" />

    <caching>
      <profiles>
        <add extension=".png" policy="CacheUntilChange" kernelCachePolicy="CacheUntilChange" />
        <add extension=".jpeg" policy="CacheUntilChange" kernelCachePolicy="CacheUntilChange" />
        <add extension=".jpg" policy="CacheUntilChange" kernelCachePolicy="CacheUntilChange" />
        <add extension=".gif" policy="CacheUntilChange" kernelCachePolicy="CacheUntilChange" />
        <add extension=".js" policy="CacheUntilChange" kernelCachePolicy="CacheUntilChange" />
        <add extension=".css" policy="CacheUntilChange" kernelCachePolicy="CacheUntilChange" />
      </profiles>
    </caching>

  </system.webServer>

  <system.serviceModel>
    <bindings />
    <client />
  </system.serviceModel>

</configuration>